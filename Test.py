import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    PreCheckoutQuery,
    LabeledPrice,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
bot = Bot(token="7757442937:AAGNqTEdQ_GGjElbU69GKYMn8SfcvVLjTDo")
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "https:/invasion-team.ru/telegram/api/ApiPaymet.php"
ADMIN_ID = 123456789
WEBAPP_URL = "https://invasion-team.ru/telegram/casino.html"
PAYMENT_TOKEN = ""

def get_payment_keyboard(amount: int):
    builder = InlineKeyboardBuilder()
    builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠êÔ∏è", pay=True)
    return builder.as_markup()

@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    web_app_url = f"{WEBAPP_URL}?id={user_id}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üé∞ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=web_app_url))
        ],
        [InlineKeyboardButton(
            text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥—ã",
            callback_data="choose_topup")
        ]
    ])
    await message.answer(
        "üéâ –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É! –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±–∏—Ç—å –¥–æ—Ä–æ–≥–æ–π –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –º–∞–ª—É—é —Ü–µ–Ω—É!\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üíé –î–ª—è —É—á–∞—Å—Ç–∏—è —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∑–≤–µ–∑–¥—ã\n"
        "üîº –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "choose_topup")
async def handle_choose_topup(callback: CallbackQuery):
    buttons = [
        [InlineKeyboardButton(text="15 ‚≠êÔ∏è", callback_data="topup_15")],
        [InlineKeyboardButton(text="25 ‚≠êÔ∏è", callback_data="topup_25")],
        [InlineKeyboardButton(text="50 ‚≠êÔ∏è", callback_data="topup_50")],
        [InlineKeyboardButton(text="100 ‚≠êÔ∏è", callback_data="topup_100")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:", reply_markup=keyboard)
    await callback.answer()

async def create_payment(message: Message, amount: int):
    try:
        prices = [LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} –∑–≤–µ–∑–¥", amount=amount)]
        
        await message.answer_invoice(
            title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} ‚≠êÔ∏è",
            description=f"–ü–æ–∫—É–ø–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∑–≤–µ–∑–¥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö",
            provider_token=PAYMENT_TOKEN,
            currency="XTR",
            prices=prices,
            payload=f"stars_{amount}",
            reply_markup=get_payment_keyboard(amount)
        )
    except Exception as e:
        logging.error(f"Error creating payment: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")

@dp.callback_query(F.data.startswith("topup_"))
async def handle_topup(callback: CallbackQuery):
    try:
        amount = int(callback.data.split("_")[1])
        await create_payment(callback.message, amount)
        await callback.answer()
    except ValueError:
        await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"
    )

@dp.message(F.successful_payment)
async def successful_payment(message: Message):
    try:
        user_id = message.from_user.id
        amount = int(message.successful_payment.total_amount / 100)
        
        async with aiohttp.ClientSession() as session:
            params = {"id": user_id, "stars": amount}
            
            async with session.get(API_URL, params=params) as response:
                data = await response.json()
                
                if response.status == 200 and data.get('status') == 'success':
                    await message.answer(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n"
                        f"‚ñ´Ô∏è –ü–æ–ª—É—á–µ–Ω–æ: {amount} ‚≠êÔ∏è\n"
                        f"‚ñ´Ô∏è –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {data['new_stars']} ‚≠êÔ∏è\n\n"
                        f"–£–¥–∞—á–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! üé≤"
                    )
                else:
                    error_msg = data.get('message', 'Unknown error')
                    logging.error(f"API Error: {error_msg}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support")
                    
    except Exception as e:
        logging.error(f"Payment processing error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω")
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üö® –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —É @{message.from_user.username}\n"
                 f"ID: {user_id}\n"
                 f"–°—É–º–º–∞: {amount} ‚≠êÔ∏è\n"
                 f"–û—à–∏–±–∫–∞: {str(e)}"
        )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
